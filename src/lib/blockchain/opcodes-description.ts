import { Opcode } from './opcodes'

export const opcodeDescription: {
  [key in Opcode]?: string
} = {
  OP_0: '将 0 入栈',
  OP_1: '将 1 入栈',
  OP_2: '将 2 入栈',
  OP_PUSHBYTES_1: '入栈其后 1 字节数据',
  OP_PUSHBYTES_2: '入栈其后 2 字节数据',
  OP_PUSHBYTES_3: '入栈其后 3 字节数据',
  OP_PUSHDATA1: '其后 1 字节为数据长度, 并将其后数据长度的数据入栈',
  OP_1NEGATE: '将 -1 入栈',
  OP_RESERVED: '保留操作码, 执行到时会抛出错误',
  OP_NOP:
    '空操作码, 无任何操作, 执行到此操作码时会被忽略, 继续执行下一个操作码',
  OP_VER: '保留操作码, 执行到时会抛出错误',
  OP_IF: '栈顶元素出栈, 如果栈顶元素非 0, 则执行后续操作',
  OP_NOTIF: '栈顶元素出栈, 如果栈顶元素为 0, 则执行后续操作',
  OP_VERIF: ' 保留操作码, 执行到时会抛出错误',
  OP_VERNOTIF: '保留操作码, 执行到时会抛出错误',
  OP_ELSE: '配合 OP_IF 或 OP_NOTIF 执行, 相当于条件语句中的 else',
  OP_VERIFY: '栈顶元素出栈, 如果栈顶元素非 0, 则继续执行, 否则抛出错误',
  OP_RETURN: '终止脚本执行, 并标记交易无效, 用于存储数据',
  OP_TOALTSTACK: '栈顶元素出栈, 并入备用栈',
  OP_FROMALTSTACK: '备用栈顶元素出栈, 并入栈',
  OP_2DROP: '栈顶 2 个元素出栈',
  OP_2DUP: '复制栈顶 2 个元素',
  OP_3DUP: '复制栈顶 3 个元素',
  OP_2OVER: '复制栈顶向下的第三和第四个元素, 并放入栈顶',
  OP_2ROT: '将栈顶向下的第五和第六个元素移动到栈顶',
  OP_2SWAP: '将栈顶向下的第三和第四个元素和第一和第二元素交换',
  OP_IFDUP: '如果栈顶元素非 0, 则复制栈顶元素',
  OP_DEPTH: '将栈中的元素数量入栈',
  OP_DROP: '栈顶元素出栈',
  OP_DUP: '复制栈顶元素',
  OP_NIP: '将栈顶元素下面的一个元素出栈',
  OP_OVER: '复制栈顶元素下面的一个元素并入栈',
  OP_PICK: '读取栈顶元素的值 n, 复制第 n + 1 元素到栈顶',
  OP_ROLL: '读取栈顶元素的值 n, 移动第 n + 1 元素到栈顶',
  OP_ROT: '栈顶 3 个元素位置轮转, 1 -> 2, 2 -> 3, 3 -> 1',
  OP_SWAP: '交换栈顶 2 个元素',
  OP_TUCK: '复制栈顶元素并插入到第二个元素下面',
  OP_CAT: '出栈 2 个元素, 将其拼接后入栈',
  OP_SUBSTR:
    '出栈 3 个元素, 分别表示 size、 begin、 string, 将 string 的 begin 位置开始的 size 长度的子串入栈',
  OP_LEFT:
    '出栈 2 个元素, 分别表示 size、 string, 将 string 的左边 size 长度的子串入栈',
  OP_RIGHT:
    '出栈 2 个元素, 分别表示 size、 string, 将 string 的右边 size 长度的子串入栈',
  OP_SIZE: '将栈顶元素的长度入栈',
  OP_INVERT: '出栈栈顶元素, 并按位取反后入栈',
  OP_AND: '出栈 2 个元素, 并按位与后入栈',
  OP_OR: '出栈 2 个元素, 并按位或后入栈',
  OP_XOR: '出栈 2 个元素, 并按位异或后入栈',
  OP_EQUAL: '出栈 2 个元素, 如果相等则入栈 1, 否则入栈 0',
  OP_EQUALVERIFY: '出栈 2 个元素, 如果相等则继续执行, 否则抛出错误',
  OP_RESERVED1: '保留操作码, 执行到时会抛出错误',
  OP_RESERVED2: '保留操作码, 执行到时会抛出错误',
  OP_1ADD: '出栈栈顶元素, 加 1 后入栈',
  OP_1SUB: '出栈栈顶元素, 减 1 后入栈',
  OP_2MUL: '出栈栈顶元素, 乘 2 后入栈',
  OP_2DIV: '出栈栈顶元素, 除 2 后入栈',
  OP_NEGATE: '出栈栈顶元素, 取反后入栈',
  OP_ABS: '出栈栈顶元素, 取绝对值后入栈',
  OP_NOT: '出栈栈顶元素, 如果为 0 则入栈 1, 否则入栈 0',
  OP_0NOTEQUAL: '出栈栈顶元素, 如果为 0 则入栈 0, 否则入栈 1',
  OP_ADD: '出栈 2 个元素, 相加后入栈',
  OP_SUB: '出栈 2 个元素, 相减后入栈',
  OP_MUL: '出栈 2 个元素, 相乘后入栈',
  OP_DIV: '出栈 2 个元素, 相除后入栈',
  OP_MOD: '出栈 2 个元素, 取模后入栈',
  OP_LSHIFT: '出栈 2 个元素 a 和 b, 将 a 左移 b 位后入栈',
  OP_RSHIFT: '出栈 2 个元素 a 和 b, 将 a 右移 b 位后入栈',
  OP_BOOLAND: '出栈 2 个元素, 如果都非 0 则入栈 1, 否则入栈 0',
  OP_BOOLOR: '出栈 2 个元素, 如果有一个非 0 则入栈 1, 否则入栈 0',
  OP_NUMEQUAL: '出栈 2 个元素, 如果数值相等则入栈 1, 否则入栈 0',
  OP_NUMNOTEQUAL: '出栈 2 个元素, 如果数值不等则入栈 1, 否则入栈 0',
  OP_LESSTHAN:
    '出栈 2 个元素, 如果第二个元素小于第一个元素则入栈 1, 否则入栈 0',
  OP_GREATERTHAN:
    '出栈 2 个元素, 如果第二个元素大于第一个元素则入栈 1, 否则入栈 0',
  OP_LESSTHANOREQUAL:
    '出栈 2 个元素, 如果第二个元素小于等于第一个元素则入栈 1, 否则入栈 0',
  OP_GREATERTHANOREQUAL:
    '出栈 2 个元素, 如果第二个元素大于等于第一个元素则入栈 1, 否则入栈 0',
  OP_MIN: '出栈 2 个元素, 取最小值入栈',
  OP_MAX: '出栈 2 个元素, 取最大值入栈',
  OP_WITHIN:
    '出栈 3 个元素分别为 max、min、x, 如果 min <= x < max 则入栈 1, 否则入栈 0',
  OP_RIPEMD160: '出栈栈顶元素, 计算其 RIPEMD160 哈希值后入栈',
  OP_SHA1: '出栈栈顶元素, 计算其 SHA1 哈希值后入栈',
  OP_SHA256: '出栈栈顶元素, 计算其 SHA256 哈希值后入栈',
  OP_HASH160: '出栈栈顶元素, 计算其 HASH160 哈希值后入栈',
  OP_HASH256: '出栈栈顶元素, 计算其 HASH256 哈希值后入栈',
  OP_CODESEPARATOR: '将当前执行位置标记为一个分隔点',
  OP_CHECKSIG:
    '出栈 2 个元素分别为签名和公钥, 验证签名是否由公钥签名, 如果验证通过则入栈 1, 否则入栈 0',
  OP_CHECKSIGVERIFY:
    '出栈 2 个元素分别为签名和公钥, 验证签名是否由公钥签名, 验证通过则继续执行, 否则抛出错误',
  OP_CHECKMULTISIG:
    '依次出栈公钥数量 m, m 个公钥、签名数量 n, n 个签名, 额外的值。 验证签名是否由 m 个公钥中的任意 n 个签名, 如果验证通过则入栈 1, 否则入栈 0',
  OP_CHECKMULTISIGVERIFY:
    '依次出栈公钥数量 m, m 个公钥、签名数量 n, n 个签名, 额外的值。 验证签名是否由 m 个公钥中的任意 n 个签名, 验证通过则继续执行, 否则抛出错误',
  OP_NOP1: '保留操作码, 执行到时会抛出错误',
  OP_CHECKLOCKTIMEVERIFY:
    '检查栈顶元素是否大于等于交易的 locktime, 如果满足则继续执行, 否则抛出错误',
  OP_CHECKSEQUENCEVERIFY:
    '检查栈顶元素是否满足对应交易输入 sequence 值, 如果满足则继续执行, 否则抛出错误',
  OP_NOP4: '保留操作码, 执行到时会抛出错误',
  OP_NOP5: '保留操作码, 执行到时会抛出错误',
  OP_NOP6: '保留操作码, 执行到时会抛出错误',
  OP_NOP7: '保留操作码, 执行到时会抛出错误',
  OP_NOP8: '保留操作码, 执行到时会抛出错误',
  OP_NOP9: '保留操作码, 执行到时会抛出错误',
  OP_NOP10: '保留操作码, 执行到时会抛出错误',
  OP_CHECKSIGADD:
    '出栈 3 个元素分别为公钥、签名和整数 n, 验证签名是否有效, 如果验证通过，则入栈 n + 1, 否则入栈 n + 0',
  OP_INVALIDOPCODE: '无效操作码, 执行到时会抛出错误'
}
